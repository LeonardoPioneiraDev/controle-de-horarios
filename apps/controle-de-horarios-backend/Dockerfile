# ==========================================
# üöÄ CONTROLE DE HOR√ÅRIOS BACKEND - MULTI-STAGE
# ==========================================

# ---- Build Stage ----
  FROM node:20-alpine AS builder

  WORKDIR /app
  
  # Instalar depend√™ncias de build
  RUN apk add --no-cache python3 make g++ git
  
  # Copiar package.json e instalar depend√™ncias
  COPY package.json ./
  RUN npm install
  
  # Copiar c√≥digo fonte e buildar
  COPY src ./src
  COPY tsconfig*.json ./
  COPY nest-cli.json ./
  
  # Build
  RUN npm run build
  
  # ---- Production Stage ----
  FROM node:20-slim AS production
  
  # Instalar depend√™ncias de runtime
  RUN apt-get update && apt-get install -y \
      curl bash netcat-openbsd ca-certificates \
      && rm -rf /var/lib/apt/lists/*
  
  # ==========================================
  # üöÄ APLICA√á√ÉO
  # ==========================================
  WORKDIR /app
  
  # Instalar apenas depend√™ncias de produ√ß√£o
  COPY package.json ./
  RUN npm install --only=production
  
  # Copiar build da aplica√ß√£o
  COPY --from=builder /app/dist ./dist
  
  # Criar diret√≥rios e usu√°rio
  RUN mkdir -p logs uploads \
      && groupadd -g 1001 nodejs \
      && useradd -u 1001 -g nodejs -m nestjs \
      && chown -R nestjs:nodejs /app
  
  # Environment
  ENV NODE_ENV=production
  ENV HOST=0.0.0.0
  ENV PORT=3335
  
  HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
      CMD curl -f http://localhost:3335/health || exit 1
  
  EXPOSE 3335
  USER nestjs
  
  CMD ["node", "dist/main.js"]