import { Injectable, NotFoundException, BadRequestException, ConflictException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, Like } from 'typeorm';
import { ConfigService } from '@nestjs/config';
import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import { User, UserRole, UserStatus } from './entities/user.entity';
import { EmailService } from '../email/email.service';
import * as crypto from 'crypto';
import * as bcrypt from 'bcrypt';

@Injectable()
export class UsersService {
  constructor(
    @InjectRepository(User)
    private usersRepository: Repository<User>,
    private emailService: EmailService,
    private configService: ConfigService,
  ) {}

  async create(createUserDto: CreateUserDto): Promise<User> {
    console.log(`‚ûï [CREATE_USER] Iniciando cria√ß√£o de usu√°rio: ${createUserDto.email}`);

    // Verificar se e-mail j√° existe
    const existingUser = await this.usersRepository.findOne({
      where: { email: createUserDto.email }
    });

    if (existingUser) {
      console.log(`‚ùå [CREATE_USER] E-mail j√° existe: ${createUserDto.email}`);
      throw new ConflictException('E-mail j√° est√° em uso');
    }

    // Verificar dom√≠nio do e-mail
    const allowedDomain = this.configService.get('ALLOWED_EMAIL_DOMAIN');
    if (allowedDomain && !createUserDto.email.endsWith(`@${allowedDomain}`)) {
      throw new BadRequestException(`E-mail deve ser do dom√≠nio @${allowedDomain}`);
    }

    // Gerar senha tempor√°ria e token de reset
    const tempPassword = this.generateTempPassword();
    const resetToken = crypto.randomBytes(32).toString('hex');
    const resetExpires = new Date(Date.now() + 60 * 60 * 1000); // 1 hora

    console.log(`üîë [CREATE_USER] Senha tempor√°ria gerada: ${tempPassword}`);
    console.log(`üîó [CREATE_USER] Token de reset gerado: ${resetToken}`);

    // Hash da senha tempor√°ria
    const saltRounds = 12;
    const hashedTempPassword = await bcrypt.hash(tempPassword, saltRounds);

    // Criar usu√°rio
    const user = this.usersRepository.create({
      ...createUserDto,
      tempPassword: hashedTempPassword,
      tempPasswordExpires: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 horas
      passwordResetToken: resetToken,
      passwordResetExpires: resetExpires,
      status: UserStatus.PENDING,
      emailVerified: false,
      firstLogin: true,
    });

    const savedUser = await this.usersRepository.save(user);
    console.log(`‚úÖ [CREATE_USER] Usu√°rio criado: ${createUserDto.email} - ID: ${savedUser.id}`);

    // Enviar e-mail de boas-vindas
    try {
      const emailSent = await this.emailService.sendWelcomeEmail(
        savedUser.email,
        savedUser.firstName,
        tempPassword, // Senha em texto plano para o e-mail
        resetToken
      );

      if (emailSent) {
        console.log(`‚úÖ [CREATE_USER] E-mail enviado com sucesso para: ${savedUser.email}`);
      } else {
        console.log(`‚ö†Ô∏è [CREATE_USER] E-mail n√£o foi enviado para: ${savedUser.email} (modo simula√ß√£o ou erro)`);
      }
    } catch (emailError) {
      console.log(`‚ùå [CREATE_USER] Erro ao enviar e-mail: ${emailError.message}`);
      // N√£o falhar a cria√ß√£o do usu√°rio por erro de e-mail
    }

    // Logs de simula√ß√£o para desenvolvimento
    console.log(`üìß [EMAIL] E-mail ${this.configService.get('EMAIL_ENABLED') === 'true' ? 'habilitado' : 'desabilitado'} - ${this.configService.get('EMAIL_ENABLED') === 'true' ? 'Enviando' : 'Simulando envio'} para: ${savedUser.email}`);
    console.log(`üìß [EMAIL] Dados que seriam enviados:`);
    console.log(`   üë§ Nome: ${savedUser.firstName}`);
    console.log(`   üîë Senha Tempor√°ria: ${tempPassword}`);
    console.log(`   üîó Token de Reset: ${resetToken}`);
    console.log(`   üåê Link: ${this.configService.get('FRONTEND_URL', 'http://localhost:3000')}/reset-password?token=${resetToken}`);

    return savedUser;
  }

  private generateTempPassword(): string {
    // Gerar senha tempor√°ria de 8 caracteres
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let password = '';
    for (let i = 0; i < 8; i++) {
      password += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return password;
  }

  async findAll(): Promise<User[]> {
    console.log(`üë• [LIST_USERS] Listagem de usu√°rios solicitada por: administrador`);
    console.log(`üë• [LIST_USERS] Buscando todos os usu√°rios`);
    
    const users = await this.usersRepository.find({
      order: { createdAt: 'DESC' }
    });

    console.log(`‚úÖ [LIST_USERS] ${users.length} usu√°rios encontrados`);
    console.log(`‚úÖ [LIST_USERS] ${users.length} usu√°rios retornados para: administrador`);
    
    return users;
  }

  async findOne(id: string): Promise<User> {
    console.log(`üë§ [GET_USER] Buscando usu√°rio por ID: ${id}`);
    
    const user = await this.usersRepository.findOne({
      where: { id }
    });

    if (!user) {
      console.log(`‚ùå [GET_USER] Usu√°rio n√£o encontrado: ${id}`);
      throw new NotFoundException('Usu√°rio n√£o encontrado');
    }

    console.log(`‚úÖ [GET_USER] Usu√°rio encontrado: ${user.email}`);
    
    return user;
  }

  async findByEmail(email: string): Promise<User | null> {
    console.log(`üîç [FIND_BY_EMAIL] Buscando usu√°rio por email: ${email}`);
    
    const user = await this.usersRepository.findOne({
      where: { email: email.toLowerCase() }
    });

    if (user) {
      console.log(`‚úÖ [FIND_BY_EMAIL] Usu√°rio encontrado: ${email}`);
    } else {
      console.log(`‚ùå [FIND_BY_EMAIL] Usu√°rio n√£o encontrado: ${email}`);
    }

    return user;
  }

  // ‚úÖ NOVO M√âTODO PARA BUSCAR POR TOKEN DE RESET
  async findByResetToken(token: string): Promise<User | null> {
    console.log(`üîç [FIND_BY_RESET_TOKEN] Buscando usu√°rio por token de reset`);
    
    const user = await this.usersRepository.findOne({
      where: { passwordResetToken: token }
    });

    if (user) {
      console.log(`‚úÖ [FIND_BY_RESET_TOKEN] Usu√°rio encontrado: ${user.email}`);
    } else {
      console.log(`‚ùå [FIND_BY_RESET_TOKEN] Usu√°rio n√£o encontrado para o token`);
    }

    return user;
  }

  // ‚úÖ NOVO M√âTODO PARA BUSCAR POR TOKEN DE VERIFICA√á√ÉO DE EMAIL
  async findByEmailVerificationToken(token: string): Promise<User | null> {
    console.log(`üîç [FIND_BY_EMAIL_TOKEN] Buscando usu√°rio por token de verifica√ß√£o de email`);
    
    const user = await this.usersRepository.findOne({
      where: { emailVerificationToken: token }
    });

    if (user) {
      console.log(`‚úÖ [FIND_BY_EMAIL_TOKEN] Usu√°rio encontrado: ${user.email}`);
    } else {
      console.log(`‚ùå [FIND_BY_EMAIL_TOKEN] Usu√°rio n√£o encontrado para o token`);
    }

    return user;
  }

  async validateUser(email: string, password: string): Promise<User | null> {
    console.log(`üîê [VALIDATE_USER] Validando usu√°rio: ${email}`);
    
    const user = await this.findByEmail(email);
    if (!user) {
      console.log(`‚ùå [VALIDATE_USER] Usu√°rio n√£o encontrado: ${email}`);
      return null;
    }

    console.log(`‚úÖ [VALIDATE_USER] Usu√°rio encontrado: ${email} - ID: ${user.id}`);
    console.log(`üîç [VALIDATE_USER] Status: ${user.status}, HasPassword: ${!!user.password}, HasTempPassword: ${!!user.tempPassword}`);

    // Verificar se est√° bloqueado
    if (user.isLocked) {
      console.log(`üîí [VALIDATE_USER] Usu√°rio bloqueado: ${email} - Locked until: ${user.lockedUntil}`);
      throw new BadRequestException('Usu√°rio bloqueado temporariamente');
    }

    // Verificar senha normal
    if (user.password) {
      console.log(`üîë [VALIDATE_USER] Testando senha normal para: ${email}`);
      const isPasswordValid = await user.validatePassword(password);
      console.log(`üîë [VALIDATE_USER] Senha normal v√°lida: ${isPasswordValid} para: ${email}`);
      
      if (isPasswordValid) {
        console.log(`‚úÖ [VALIDATE_USER] Senha normal v√°lida para: ${email}`);
        user.resetLoginAttempts();
        await this.usersRepository.save(user);
        return user;
      }
    }

    // Verificar senha tempor√°ria
    if (user.tempPassword && user.isTempPasswordValid()) {
      console.log(`üîë [VALIDATE_USER] Testando senha tempor√°ria para: ${email}`);
      const isTempPasswordValid = await user.compareTempPassword(password);
      console.log(`üîë [VALIDATE_USER] Senha tempor√°ria v√°lida: ${isTempPasswordValid} para: ${email}`);
      
      if (isTempPasswordValid) {
        console.log(`‚úÖ [VALIDATE_USER] Senha tempor√°ria v√°lida para: ${email}`);
        user.resetLoginAttempts();
        await this.usersRepository.save(user);
        return user;
      }
    }

    // Senha incorreta - incrementar tentativas
    console.log(`‚ùå [VALIDATE_USER] Senha incorreta para: ${email}`);
    user.incrementLoginAttempts();
    await this.usersRepository.save(user);
    
    return null;
  }

  async updateLastLogin(userId: string): Promise<void> {
    console.log(`üïê [UPDATE_LAST_LOGIN] Atualizando √∫ltimo login: ${userId}`);
    
    await this.usersRepository.update(userId, {
      lastLogin: new Date()
    });
  }

  async activateUser(userId: string): Promise<User> {
    console.log(`‚úÖ [ACTIVATE_USER] Ativando usu√°rio: ${userId}`);
    
    const user = await this.findOne(userId);
    user.status = UserStatus.ACTIVE;
    user.emailVerified = true;
    user.emailVerificationToken = null;
    
    return this.usersRepository.save(user);
  }

  async resetPassword(email: string, newPassword: string): Promise<void> {
    console.log(`üîë [RESET_PASSWORD] Redefinindo senha para: ${email}`);
    
    const user = await this.findByEmail(email);
    if (!user) {
      throw new NotFoundException('Usu√°rio n√£o encontrado');
    }

    user.password = newPassword; // Ser√° hasheada automaticamente
    user.tempPassword = null;
    user.tempPasswordExpires = null;
    user.passwordResetToken = null;
    user.passwordResetExpires = null;
    user.firstLogin = false;
    user.status = UserStatus.ACTIVE;

    await this.usersRepository.save(user);
    
    console.log(`‚úÖ [RESET_PASSWORD] Senha redefinida com sucesso para: ${email}`);
  }

  async update(id: string, updateUserDto: UpdateUserDto): Promise<User> {
    console.log(`‚úèÔ∏è [UPDATE_USER] Atualizando usu√°rio: ${id}`);
    
    const user = await this.findOne(id);
    
    Object.assign(user, updateUserDto);
    
    const updatedUser = await this.usersRepository.save(user);
    
    console.log(`‚úÖ [UPDATE_USER] Usu√°rio atualizado: ${updatedUser.email}`);
    
    return updatedUser;
  }

  async remove(id: string): Promise<{ message: string }> {
    console.log(`üóëÔ∏è [DELETE_USER] Deletando usu√°rio: ${id}`);
    
    const user = await this.findOne(id);
    
    await this.usersRepository.remove(user);
    
    console.log(`‚úÖ [DELETE_USER] Usu√°rio deletado: ${user.email}`);
    
    return { message: 'Usu√°rio deletado com sucesso' };
  }

  async search(query: string): Promise<User[]> {
    console.log(`üîç [SEARCH_USERS] Buscando por: "${query}"`);
    
    const users = await this.usersRepository.find({
      where: [
        { firstName: Like(`%${query}%`) },
        { lastName: Like(`%${query}%`) },
        { email: Like(`%${query}%`) },
      ],
      order: { createdAt: 'DESC' }
    });

    console.log(`‚úÖ [SEARCH_USERS] ${users.length} usu√°rios encontrados para "${query}"`);
    
    return users;
  }

  async getStats() {
    console.log(`üìä [USER_STATS] Estat√≠sticas solicitadas por: administrador`);
    console.log(`üìä [USER_STATS] Calculando estat√≠sticas de usu√°rios`);
    
    const total = await this.usersRepository.count();
    const active = await this.usersRepository.count({ where: { status: UserStatus.ACTIVE } });
    const pending = await this.usersRepository.count({ where: { status: UserStatus.PENDING } });
    const inactive = await this.usersRepository.count({ where: { status: UserStatus.INACTIVE } });
    
    const byRole = await this.usersRepository
      .createQueryBuilder('user')
      .select('user.role', 'role')
      .addSelect('COUNT(*)', 'count')
      .groupBy('user.role')
      .getRawMany();

    const stats = {
      total,
      byStatus: { active, pending, inactive },
      byRole: byRole.reduce((acc, item) => {
        acc[item.role] = parseInt(item.count);
        return acc;
      }, {}),
    };

    console.log(`‚úÖ [USER_STATS] Estat√≠sticas calculadas:`, stats);
    console.log(`‚úÖ [USER_STATS] Estat√≠sticas retornadas para: administrador`);
    
    return stats;
  }
}