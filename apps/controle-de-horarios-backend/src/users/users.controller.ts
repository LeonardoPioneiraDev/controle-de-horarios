// src/users/users.controller.ts

import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  Query,
  UseGuards,
  Request,
  ParseUUIDPipe,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiBearerAuth,
  ApiQuery,
  ApiParam,
  ApiBody,
} from '@nestjs/swagger';
import { UsersService } from './users.service';
import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { RolesGuard } from '../auth/guards/roles.guard';
import { Roles } from '../auth/decorators/roles.decorator';
// ‚úÖ CORRIGIR: Importar UserRole do enum, n√£o Role da entidade
import { UserRole } from '../common/enums/user-role.enum';

@ApiTags('Users')
@Controller('users')
@UseGuards(JwtAuthGuard, RolesGuard)
@ApiBearerAuth()
export class UsersController {
  constructor(private readonly usersService: UsersService) {}

  @Post()
  @Roles(UserRole.ADMINISTRADOR) // ‚úÖ CORRIGIDO
  @ApiOperation({ summary: 'Criar novo usu√°rio (Apenas Administradores)' })
  @ApiBody({ type: CreateUserDto })
  @ApiResponse({ status: 201, description: 'Usu√°rio criado com sucesso' })
  @ApiResponse({ status: 400, description: 'Dados inv√°lidos' })
  @ApiResponse({ status: 403, description: 'Sem permiss√£o' })
  async create(@Body() createUserDto: CreateUserDto, @Request() req) {
    const currentUser = req.user;
    
    console.log(`‚ûï [CREATE_USER] Cria√ß√£o de usu√°rio solicitada por: ${currentUser.email} (${currentUser.role})`);
    console.log(`   üìù Dados: { email: ${createUserDto.email}, firstName: ${createUserDto.firstName}, role: ${createUserDto.role} }`);
    
    try {
      const newUser = await this.usersService.create(createUserDto);
      
      console.log(`‚úÖ [CREATE_USER] Usu√°rio criado com sucesso - ID: ${newUser.id}, Email: ${newUser.email}`);
      
      return newUser;
    } catch (error) {
      console.log(`‚ùå [CREATE_USER] Erro ao criar usu√°rio: ${error.message}`);
      throw error;
    }
  }

  @Get()
  @Roles(UserRole.GERENTE) // ‚úÖ ADICIONAR ROLE PARA LISTAR USU√ÅRIOS
  @ApiOperation({ summary: 'Listar todos os usu√°rios' })
  @ApiResponse({ status: 200, description: 'Lista de usu√°rios' })
  async findAll(@Request() req) {
    const currentUser = req.user;
    
    console.log(`üë• [LIST_USERS] Listagem de usu√°rios solicitada por: ${currentUser.email} (${currentUser.role})`);
    
    try {
      const users = await this.usersService.findAll();
      
      console.log(`‚úÖ [LIST_USERS] ${users.length} usu√°rios retornados para: ${currentUser.email}`);
      
      return users;
    } catch (error) {
      console.log(`‚ùå [LIST_USERS] Erro ao listar usu√°rios: ${error.message}`);
      throw error;
    }
  }

  @Get('search')
  @Roles(UserRole.GERENTE) // ‚úÖ ADICIONAR ROLE PARA BUSCAR USU√ÅRIOS
  @ApiOperation({ summary: 'Buscar usu√°rios' })
  @ApiQuery({ name: 'q', description: 'Termo de busca' })
  @ApiResponse({ status: 200, description: 'Usu√°rios encontrados' })
  async search(@Query('q') query: string, @Request() req) {
    const currentUser = req.user;
    
    console.log(`üîç [SEARCH_USERS] Busca por "${query}" solicitada por: ${currentUser.email}`);
    
    try {
      const users = await this.usersService.search(query);
      
      console.log(`‚úÖ [SEARCH_USERS] ${users.length} usu√°rios encontrados para "${query}"`);
      
      return users;
    } catch (error) {
      console.log(`‚ùå [SEARCH_USERS] Erro na busca: ${error.message}`);
      throw error;
    }
  }

  @Get('stats')
  @Roles(UserRole.ADMINISTRADOR, UserRole.GERENTE) // ‚úÖ CORRIGIDO
  @ApiOperation({ summary: 'Estat√≠sticas de usu√°rios' })
  @ApiResponse({ status: 200, description: 'Estat√≠sticas' })
  async getStats(@Request() req) {
    const currentUser = req.user;
    
    console.log(`üìä [USER_STATS] Estat√≠sticas solicitadas por: ${currentUser.email} (${currentUser.role})`);
    
    try {
      const stats = await this.usersService.getStats();
      
      console.log(`‚úÖ [USER_STATS] Estat√≠sticas retornadas para: ${currentUser.email}`);
      
      return stats;
    } catch (error) {
      console.log(`‚ùå [USER_STATS] Erro ao buscar estat√≠sticas: ${error.message}`);
      throw error;
    }
  }

  @Get(':id')
  @Roles(UserRole.GERENTE) // ‚úÖ ADICIONAR ROLE
  @ApiOperation({ summary: 'Buscar usu√°rio por ID' })
  @ApiParam({ name: 'id', description: 'ID do usu√°rio' })
  @ApiResponse({ status: 200, description: 'Usu√°rio encontrado' })
  @ApiResponse({ status: 404, description: 'Usu√°rio n√£o encontrado' })
  async findOne(@Param('id', ParseUUIDPipe) id: string, @Request() req) {
    const currentUser = req.user;
    
    console.log(`üë§ [GET_USER] Busca por usu√°rio ID: ${id} solicitada por: ${currentUser.email}`);
    
    try {
      const user = await this.usersService.findOne(id);
      
      console.log(`‚úÖ [GET_USER] Usu√°rio encontrado: ${user.email} para solicitante: ${currentUser.email}`);
      
      return user;
    } catch (error) {
      console.log(`‚ùå [GET_USER] Erro ao buscar usu√°rio ID ${id}: ${error.message}`);
      throw error;
    }
  }

  @Patch(':id')
  @Roles(UserRole.ADMINISTRADOR, UserRole.GERENTE) // ‚úÖ CORRIGIDO
  @ApiOperation({ summary: 'Atualizar usu√°rio' })
  @ApiParam({ name: 'id', description: 'ID do usu√°rio' })
  @ApiBody({ type: UpdateUserDto })
  @ApiResponse({ status: 200, description: 'Usu√°rio atualizado' })
  @ApiResponse({ status: 404, description: 'Usu√°rio n√£o encontrado' })
  @ApiResponse({ status: 403, description: 'Sem permiss√£o' })
  async update(
    @Param('id', ParseUUIDPipe) id: string,
    @Body() updateUserDto: UpdateUserDto,
    @Request() req,
  ) {
    const currentUser = req.user;
    
    console.log(`‚úèÔ∏è [UPDATE_USER] Atualiza√ß√£o do usu√°rio ID: ${id} solicitada por: ${currentUser.email} (${currentUser.role})`);
    console.log(`   üìù Dados para atualizar:`, Object.keys(updateUserDto));
    
    try {
      const updatedUser = await this.usersService.update(id, updateUserDto);
      
      console.log(`‚úÖ [UPDATE_USER] Usu√°rio ${updatedUser.email} atualizado com sucesso por: ${currentUser.email}`);
      
      return updatedUser;
    } catch (error) {
      console.log(`‚ùå [UPDATE_USER] Erro ao atualizar usu√°rio ID ${id}: ${error.message}`);
      throw error;
    }
  }

  @Delete(':id')
  @Roles(UserRole.ADMINISTRADOR) // ‚úÖ CORRIGIDO
  @ApiOperation({ summary: 'Deletar usu√°rio (Apenas Administradores)' })
  @ApiParam({ name: 'id', description: 'ID do usu√°rio' })
  @ApiResponse({ status: 200, description: 'Usu√°rio deletado' })
  @ApiResponse({ status: 404, description: 'Usu√°rio n√£o encontrado' })
  @ApiResponse({ status: 403, description: 'Sem permiss√£o' })
  async remove(@Param('id', ParseUUIDPipe) id: string, @Request() req) {
    const currentUser = req.user;
    
    console.log(`üóëÔ∏è [DELETE_USER] Exclus√£o do usu√°rio ID: ${id} solicitada por: ${currentUser.email} (${currentUser.role})`);
    
    try {
      const result = await this.usersService.remove(id);
      
      console.log(`‚úÖ [DELETE_USER] Usu√°rio ID: ${id} deletado com sucesso por: ${currentUser.email}`);
      
      return result;
    } catch (error) {
      console.log(`‚ùå [DELETE_USER] Erro ao deletar usu√°rio ID ${id}: ${error.message}`);
      throw error;
    }
  }
}