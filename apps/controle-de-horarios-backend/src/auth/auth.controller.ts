import { Controller, Post, Body, Get, UseGuards, Request, HttpCode, HttpStatus } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth, ApiBody } from '@nestjs/swagger';
import { AuthService } from './auth.service';
import { UsersService } from '../users/users.service';
import { JwtAuthGuard } from './guards/jwt-auth.guard';
import { LoginDto } from './dto/login.dto';
import { RegisterDto } from './dto/register.dto';

@ApiTags('Authentication')
@Controller('auth')
export class AuthController {
  constructor(
    private readonly authService: AuthService,
    private readonly usersService: UsersService,
  ) {}

  @Post('login')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ summary: 'Fazer login' })
  @ApiBody({ type: LoginDto })
  @ApiResponse({ status: 200, description: 'Login realizado com sucesso' })
  @ApiResponse({ status: 401, description: 'Credenciais inv√°lidas' })
  async login(@Body() loginDto: LoginDto, @Request() req) {
    const { email } = loginDto;
    const clientIP = req.ip || req.connection.remoteAddress;
    
    console.log(`üîê [LOGIN_CONTROLLER] Requisi√ß√£o recebida para: ${email} - IP: ${clientIP}`);
    console.log(`üîê [LOGIN_CONTROLLER] Headers:`, req.headers);
    console.log(`üîê [LOGIN_CONTROLLER] Body:`, loginDto);
    
    try {
      const result = await this.authService.login(loginDto);
      
      console.log(`‚úÖ [LOGIN_CONTROLLER] Login bem-sucedido para: ${email}`);
      
      return result;
    } catch (error) {
      console.log(`‚ùå [LOGIN_CONTROLLER] Erro no login para: ${email} - ${error.message}`);
      console.log(`‚ùå [LOGIN_CONTROLLER] Stack:`, error.stack);
      throw error;
    }
  }

  @Post('register')
  @ApiOperation({ summary: 'Registrar novo usu√°rio' })
  @ApiBody({ type: RegisterDto })
  @ApiResponse({ status: 201, description: 'Usu√°rio criado com sucesso' })
  async register(@Body() registerDto: RegisterDto, @Request() req) {
    const clientIP = req.ip || req.connection.remoteAddress;
    
    console.log(`üìù [REGISTER_CONTROLLER] Requisi√ß√£o recebida para: ${registerDto.email} - IP: ${clientIP}`);
    
    try {
      const result = await this.authService.register(registerDto);
      
      console.log(`‚úÖ [REGISTER_CONTROLLER] Registro bem-sucedido para: ${registerDto.email}`);
      
      return result;
    } catch (error) {
      console.log(`‚ùå [REGISTER_CONTROLLER] Erro no registro para: ${registerDto.email} - ${error.message}`);
      throw error;
    }
  }

  @Post('logout')
  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth()
  @ApiOperation({ summary: 'Fazer logout' })
  async logout(@Request() req) {
    const user = req.user;
    
    console.log(`üö™ [LOGOUT_CONTROLLER] Logout para usu√°rio: ${user.email}`);
    
    return await this.authService.logout(user.sub);
  }

  @Get('me')
  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth()
  @ApiOperation({ summary: 'Obter perfil do usu√°rio logado' })
  async getProfile(@Request() req) {
    const user = req.user;
    
    console.log(`üë§ [PROFILE_CONTROLLER] Solicita√ß√£o de perfil para: ${user.email}`);
    
    const userProfile = await this.usersService.findOne(user.sub);
    return { user: userProfile };
  }

  @Get('stats')
  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth()
  @ApiOperation({ summary: 'Estat√≠sticas de autentica√ß√£o' })
  async getAuthStats(@Request() req) {
    const user = req.user;
    
    console.log(`üìä [STATS_CONTROLLER] Solicita√ß√£o de estat√≠sticas por: ${user.email}`);
    
    return await this.authService.getAuthStats();
  }

  // ‚úÖ NOVOS ENDPOINTS PARA RESET DE SENHA
  @Post('forgot-password')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ summary: 'Solicitar reset de senha' })
  @ApiBody({ 
    schema: {
      type: 'object',
      properties: {
        email: { type: 'string', format: 'email' }
      }
    }
  })
  @ApiResponse({ status: 200, description: 'E-mail de reset enviado' })
  async forgotPassword(@Body() body: { email: string }, @Request() req) {
    const clientIP = req.ip || req.connection.remoteAddress;
    
    console.log(`üîÑ [FORGOT_PASSWORD_CONTROLLER] Solicita√ß√£o para: ${body.email} - IP: ${clientIP}`);
    
    try {
      const result = await this.authService.forgotPassword(body.email);
      
      console.log(`‚úÖ [FORGOT_PASSWORD_CONTROLLER] Solicita√ß√£o processada para: ${body.email}`);
      
      return result;
    } catch (error) {
      console.log(`‚ùå [FORGOT_PASSWORD_CONTROLLER] Erro para: ${body.email} - ${error.message}`);
      throw error;
    }
  }

  @Post('reset-password')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ summary: 'Redefinir senha com token' })
  @ApiBody({ 
    schema: {
      type: 'object',
      properties: {
        token: { type: 'string' },
        newPassword: { type: 'string', minLength: 8 }
      }
    }
  })
  @ApiResponse({ status: 200, description: 'Senha redefinida com sucesso' })
  @ApiResponse({ status: 400, description: 'Token inv√°lido ou expirado' })
  async resetPassword(@Body() body: { token: string; newPassword: string }, @Request() req) {
    const clientIP = req.ip || req.connection.remoteAddress;
    
    console.log(`üîë [RESET_PASSWORD_CONTROLLER] Redefini√ß√£o com token: ${body.token.substring(0, 8)}... - IP: ${clientIP}`);
    
    try {
      const result = await this.authService.resetPassword(body.token, body.newPassword);
      
      console.log(`‚úÖ [RESET_PASSWORD_CONTROLLER] Senha redefinida com sucesso`);
      
      return result;
    } catch (error) {
      console.log(`‚ùå [RESET_PASSWORD_CONTROLLER] Erro na redefini√ß√£o: ${error.message}`);
      throw error;
    }
  }

  @Post('validate-reset-token')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ summary: 'Validar token de reset' })
  @ApiBody({ 
    schema: {
      type: 'object',
      properties: {
        token: { type: 'string' }
      }
    }
  })
  @ApiResponse({ status: 200, description: 'Token validado' })
  async validateResetToken(@Body() body: { token: string }, @Request() req) {
    const clientIP = req.ip || req.connection.remoteAddress;
    
    console.log(`üîç [VALIDATE_TOKEN_CONTROLLER] Valida√ß√£o de token: ${body.token.substring(0, 8)}... - IP: ${clientIP}`);
    
    try {
      const result = await this.authService.validateResetToken(body.token);
      
      console.log(`‚úÖ [VALIDATE_TOKEN_CONTROLLER] Token validado: ${result.valid}`);
      
      return result;
    } catch (error) {
      console.log(`‚ùå [VALIDATE_TOKEN_CONTROLLER] Erro na valida√ß√£o: ${error.message}`);
      throw error;
    }
  }

  @Post('verify-email')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ summary: 'Verificar e-mail com token' })
  @ApiBody({ 
    schema: {
      type: 'object',
      properties: {
        token: { type: 'string' }
      }
    }
  })
  @ApiResponse({ status: 200, description: 'E-mail verificado com sucesso' })
  async verifyEmail(@Body() body: { token: string }, @Request() req) {
    const clientIP = req.ip || req.connection.remoteAddress;
    
    console.log(`üìß [VERIFY_EMAIL_CONTROLLER] Verifica√ß√£o de e-mail: ${body.token.substring(0, 8)}... - IP: ${clientIP}`);
    
    try {
      const result = await this.authService.verifyEmail(body.token);
      
      console.log(`‚úÖ [VERIFY_EMAIL_CONTROLLER] E-mail verificado com sucesso`);
      
      return result;
    } catch (error) {
      console.log(`‚ùå [VERIFY_EMAIL_CONTROLLER] Erro na verifica√ß√£o: ${error.message}`);
      throw error;
    }
  }
}