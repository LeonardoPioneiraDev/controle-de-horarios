version: '3.8'

services:
  # ==========================================
  # üóÑÔ∏è POSTGRESQL DATABASE
  # ==========================================
  postgres:
    image: postgres:15-alpine
    container_name: controle-horarios-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: controle_horarios_db
      POSTGRES_USER: horarios_user
      POSTGRES_PASSWORD: horarios123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=pt_BR.UTF-8 --lc-ctype=pt_BR.UTF-8"
    ports:
      - "5435:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - controle-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U horarios_user -d controle_horarios_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================
  # üöÄ BACKEND NESTJS
  # ==========================================
  backend:
    build:
      context: ./apps/controle-de-horarios-backend
      dockerfile: Dockerfile
    container_name: controle-horarios-backend
    restart: unless-stopped
    ports:
      - "3335:3335"
    environment:
      - NODE_ENV=development
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USERNAME=horarios_user
      - DATABASE_PASSWORD=horarios123
      - DATABASE_NAME=controle_horarios_db
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - controle-network
    volumes:
      - ./apps/controle-de-horarios-backend/logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3335/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================
  # ÔøΩÔøΩ ADMINER (DATABASE ADMIN)
  # ==========================================
  adminer:
    image: adminer:latest
    container_name: controle-horarios-adminer
    restart: unless-stopped
    ports:
      - "8085:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - controle-network

volumes:
  postgres_data:
    driver: local

networks:
  controle-network:
    driver: bridge